name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv sync --extra dev
    
    - name: Run tests with coverage
      run: |
        uv run pytest --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
    
    - name: Generate coverage badge
      run: |
        COVERAGE=$(uv run pytest --cov=src --cov-report=term-missing | grep "TOTAL" | awk '{print $4}')
        echo "Coverage: $COVERAGE"

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install ruff
      run: |
        uv pip install --system ruff
    
    - name: Run Ruff linting
      run: |
        ruff check src/ || true
    
    - name: Run Ruff formatting check
      run: |
        ruff format --check src/ || true

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t semantic-search-engine:latest .
    
    - name: Test Docker image
      run: |
        docker run -d -p 8501:8501 --name test-container semantic-search-engine:latest
        sleep 30
        curl -f http://localhost:8501/_stcore/health || exit 1
        docker stop test-container
        docker rm test-container
    
    - name: Log in to Docker Hub (only on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push to Docker Hub (only on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        docker tag semantic-search-engine:latest ${{ secrets.DOCKER_USERNAME }}/semantic-search-engine:latest
        docker tag semantic-search-engine:latest ${{ secrets.DOCKER_USERNAME }}/semantic-search-engine:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/semantic-search-engine:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/semantic-search-engine:${{ github.sha }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

        